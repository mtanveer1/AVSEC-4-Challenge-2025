# -*- coding: utf-8 -*-
"""Graphs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FENO2Aycr1m92pHgZaNZHJE8AvLhB2h0
"""

import numpy as np
import matplotlib.pyplot as plt
import librosa
import librosa.display
from scipy import signal
import soundfile as sf
import os
from typing import Tuple, Optional

class AudioVisualizer:
    """
    A class to convert audio files to waveform and spectrogram visualizations.
    """

    def __init__(self, audio_file: str):
        """
        Initialize with an audio file path.

        Args:
            audio_file (str): Path to the audio file
        """
        self.audio_file = audio_file
        self.audio_data = None
        self.sample_rate = None
        self.load_audio()

    def load_audio(self) -> None:
        """Load audio file using librosa."""
        try:
            self.audio_data, self.sample_rate = librosa.load(self.audio_file, sr=None)
            print(f"Loaded audio: {self.audio_file}")
            print(f"Sample rate: {self.sample_rate} Hz")
            print(f"Duration: {len(self.audio_data) / self.sample_rate:.2f} seconds")
        except Exception as e:
            print(f"Error loading audio file: {e}")
            raise

    def plot_waveform(self, save_path: Optional[str] = None, figsize: Tuple[int, int] = (12, 4)) -> None:
        """
        Create and display/save waveform plot.

        Args:
            save_path (str, optional): Path to save the waveform image
            figsize (tuple): Figure size (width, height)
        """
        plt.figure(figsize=figsize)

        # Create time axis
        time_axis = np.linspace(0, len(self.audio_data) / self.sample_rate, len(self.audio_data))

        # Plot waveform
        plt.plot(time_axis, self.audio_data, linewidth=0.5, alpha=0.8, color='blue')
        plt.title(f'Waveform - {os.path.basename(self.audio_file)}', fontsize=24, fontweight='bold')
        plt.xlabel('Time (seconds)', fontsize=20)
        plt.ylabel('Amplitude', fontsize=20)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"Waveform saved to: {save_path}")

        plt.show()

    def plot_spectrogram(self, save_path: Optional[str] = None,
                        figsize: Tuple[int, int] = (12, 8),
                        n_fft: int = 2048,
                        hop_length: int = 512) -> None:
        """
        Create and display/save spectrogram plot using librosa.

        Args:
            save_path (str, optional): Path to save the spectrogram image
            figsize (tuple): Figure size (width, height)
            n_fft (int): FFT window size
            hop_length (int): Hop length for STFT
        """
        # Compute Short-Time Fourier Transform
        stft = librosa.stft(self.audio_data, n_fft=n_fft, hop_length=hop_length)
        spectrogram_db = librosa.amplitude_to_db(np.abs(stft), ref=np.max)

        plt.figure(figsize=figsize)
        librosa.display.specshow(spectrogram_db,
                                sr=self.sample_rate,
                                hop_length=hop_length,
                                x_axis='time',
                                y_axis='hz',
                                cmap='viridis')

        cbar = plt.colorbar(format='%+2.0f dB')
        cbar.set_label('Magnitude (dB)', fontsize=24)
        cbar.ax.tick_params(labelsize=20)
        plt.title(f'Spectrogram - {os.path.basename(self.audio_file)}', fontsize=24, fontweight='bold')
        plt.xlabel('Time (seconds)', fontsize=22)
        plt.ylabel('Frequency (Hz)', fontsize=22)
        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"Spectrogram saved to: {save_path}")

        plt.show()

    def plot_mel_spectrogram(self, save_path: Optional[str] = None,
                            figsize: Tuple[int, int] = (12, 8),
                            n_mels: int = 128,
                            n_fft: int = 2048,
                            hop_length: int = 512) -> None:
        """
        Create and display/save mel-scaled spectrogram.

        Args:
            save_path (str, optional): Path to save the mel spectrogram image
            figsize (tuple): Figure size (width, height)
            n_mels (int): Number of mel frequency bands
            n_fft (int): FFT window size
            hop_length (int): Hop length for STFT
        """
        # Compute mel-scaled spectrogram
        mel_spec = librosa.feature.melspectrogram(y=self.audio_data,
                                                 sr=self.sample_rate,
                                                 n_mels=n_mels,
                                                 n_fft=n_fft,
                                                 hop_length=hop_length)
        mel_spec_db = librosa.amplitude_to_db(mel_spec, ref=np.max)

        plt.figure(figsize=figsize)
        librosa.display.specshow(mel_spec_db,
                                sr=self.sample_rate,
                                hop_length=hop_length,
                                x_axis='time',
                                y_axis='mel',
                                cmap='viridis')

        plt.colorbar(format='%+2.0f dB', label='Magnitude (dB)')
        plt.title(f'Mel Spectrogram - {os.path.basename(self.audio_file)}', fontsize=24, fontweight='bold')
        plt.xlabel('Time (seconds)', fontsize=20)
        plt.ylabel('Mel Frequency', fontsize=20)
        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"Mel spectrogram saved to: {save_path}")

        plt.show()

    def plot_scipy_spectrogram(self, save_path: Optional[str] = None,
                              figsize: Tuple[int, int] = (12, 8),
                              nperseg: int = 1024,
                              noverlap: int = 512) -> None:
        """
        Create spectrogram using scipy.signal for comparison.

        Args:
            save_path (str, optional): Path to save the spectrogram image
            figsize (tuple): Figure size (width, height)
            nperseg (int): Length of each segment for STFT
            noverlap (int): Number of points to overlap between segments
        """
        frequencies, times, spectrogram = signal.spectrogram(
            self.audio_data,
            self.sample_rate,
            nperseg=nperseg,
            noverlap=noverlap
        )

        plt.figure(figsize=figsize)
        plt.pcolormesh(times, frequencies, 10 * np.log10(spectrogram), cmap='viridis')
        plt.colorbar(label='Power (dB)')
        plt.title(f'Spectrogram (SciPy) - {os.path.basename(self.audio_file)}', fontsize=24, fontweight='bold')
        plt.xlabel('Time (seconds)', fontsize=20)
        plt.ylabel('Frequency (Hz)', fontsize=20)
        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"SciPy spectrogram saved to: {save_path}")

        plt.show()

    def create_all_visualizations(self, output_dir: str = "audio_visualizations") -> None:
        """
        Create all types of visualizations and save them.

        Args:
            output_dir (str): Directory to save all visualizations
        """
        # Create output directory
        os.makedirs(output_dir, exist_ok=True)

        base_name = os.path.splitext(os.path.basename(self.audio_file))[0]

        # Generate all visualizations
        self.plot_waveform(save_path=f"{output_dir}/{base_name}_waveform.png")
        self.plot_spectrogram(save_path=f"{output_dir}/{base_name}_spectrogram.png")
        self.plot_mel_spectrogram(save_path=f"{output_dir}/{base_name}_mel_spectrogram.png")
        self.plot_scipy_spectrogram(save_path=f"{output_dir}/{base_name}_scipy_spectrogram.png")

        print(f"\nAll visualizations saved in: {output_dir}")

def batch_process_audio_files(audio_files: list, output_dir: str = "batch_visualizations") -> None:
    """
    Process multiple audio files and create visualizations for each.

    Args:
        audio_files (list): List of audio file paths
        output_dir (str): Directory to save all visualizations
    """
    for audio_file in audio_files:
        try:
            print(f"\n{'='*50}")
            print(f"Processing: {audio_file}")
            print(f"{'='*50}")

            visualizer = AudioVisualizer(audio_file)
            file_output_dir = os.path.join(output_dir, os.path.splitext(os.path.basename(audio_file))[0])
            visualizer.create_all_visualizations(file_output_dir)

        except Exception as e:
            print(f"Error processing {audio_file}: {e}")

# Example usage
if __name__ == "__main__":
    audio_file_path = "/content/file.wav"  #mention your file path

    # Create visualizer instance
    visualizer = AudioVisualizer(audio_file_path)

    # Create individual plots
    visualizer.plot_waveform()
    visualizer.plot_spectrogram()
    visualizer.plot_mel_spectrogram()